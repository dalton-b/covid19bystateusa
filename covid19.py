# -*- coding: utf-8 -*-
"""covid19.ipynb

Automatically generated by Colaboratory.

"""


import pandas as pd
import csv
import urllib.request as request
import matplotlib.pyplot as plt
import numpy as np
import datetime

def adjust_header(df):
    new_header = df.iloc[0]
    df = df[1:]
    df.columns = new_header
    return df


r = request.urlopen('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv').read().decode('utf8').split("\n")
reader = csv.reader(r)
confirmed_global = adjust_header(pd.DataFrame(reader))

r = request.urlopen('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv').read().decode('utf8').split("\n")
reader = csv.reader(r)
confirmed_US = pd.DataFrame(reader)
confirmed_US = adjust_header(confirmed_US)


# confirmed_US = pd.read_csv('confirmed_US.csv')



# r = request.urlopen('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv').read().decode('utf8').split("\n")
# reader = csv.reader(r)
# deaths_US = pd.DataFrame(reader)
#
# r = request.urlopen('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv').read().decode('utf8').split("\n")
# reader = csv.reader(r)
# deaths_global = pd.DataFrame(reader)
#
# r = request.urlopen('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv').read().decode('utf8').split("\n")
# reader = csv.reader(r)
# recovered_global = pd.DataFrame(reader)


def sort_by_state(df):
    df = df.groupby("Province_State").sum()
    return df

def sort_by_country(df):
    df = df.groupby("Country/Region").sum()
    return df


def minutephysics_plot(df, name, start_date):

    start_index = df.columns.get_loc(start_date)
    end_date = df.columns[-1]
    end_date = datetime.datetime.strptime(end_date, '%m/%d/%y').strftime('%Y-%m-%d')

    plt.yscale('log')
    plt.xscale('log')
    plt.title(name + ' ' + end_date)

    for index, row, in df.iterrows():
        total_cases = row.iloc[start_index:]
        new_cases_week = []
        for i in range(7, len(total_cases)):
            new_cases_week.append(total_cases[i]-total_cases[i-7])
        plt.plot(total_cases.iloc[7:], new_cases_week)

    plt.plot([1, 10, 100, 1000, 10000, 100000, 1000000], [1, 10, 100, 1000, 10000, 100000, 1000000], '--')
    plt.legend(df.index.values)
    plt.xlabel("Total Confirmed Cases")
    plt.ylabel("New Cases, Past Week")
    plt.savefig(name + "/" + name + ' ' + str(end_date) + '.png')
    plt.close()


def get_top_n(df, n):
    return df.nlargest(n, df.columns[-1])


confirmed_US = confirmed_US.apply(pd.to_numeric, errors='ignore')
confirmed_US_by_state = sort_by_state(confirmed_US)

confirmed_global = confirmed_global.apply(pd.to_numeric, errors='ignore')
confirmed_global_by_country = sort_by_country(confirmed_global)

top_US = get_top_n(confirmed_US_by_state, 7)
minutephysics_plot(top_US, "US", "2/22/20")


top_global = get_top_n(confirmed_global_by_country, 10)
minutephysics_plot(top_global, "Global", "2/22/20")


countries_interest = pd.DataFrame(confirmed_global_by_country.loc["US", :]).T
countries_interest = countries_interest.append(confirmed_global_by_country.loc["Italy", :])
countries_interest = countries_interest.append(confirmed_global_by_country.loc["Korea, South", :])
countries_interest = countries_interest.append(confirmed_global_by_country.loc["Japan", :])
# countries_interest = countries_interest.append(confirmed_global_by_country.loc["Spain", :])
minutephysics_plot(countries_interest, "Interest_Countries", "1/22/20")

# # for i in range(14):
states_interest = pd.DataFrame(confirmed_US_by_state.loc["New York", :]).T
states_interest = states_interest.append(confirmed_US_by_state.loc["Louisiana", :])
states_interest = states_interest.append(confirmed_US_by_state.loc["New Jersey", :])
states_interest = states_interest.append(confirmed_US_by_state.loc["Connecticut", :])
states_interest = states_interest.append(confirmed_US_by_state.loc["Massachusetts", :])
states_interest = states_interest.append(confirmed_US_by_state.loc["California", :])
minutephysics_plot(states_interest, "Interest_States", "2/22/20")
  # confirmed_US_by_state = confirmed_US_by_state[confirmed_US_by_state.columns[:-1]]

Northeast_US = pd.DataFrame(confirmed_US_by_state.loc["New York", :]).T
Northeast_US = Northeast_US.append(confirmed_US_by_state.loc["Rhode Island", :])
Northeast_US = Northeast_US.append(confirmed_US_by_state.loc["New Jersey", :])
Northeast_US = Northeast_US.append(confirmed_US_by_state.loc["Connecticut", :])
Northeast_US = Northeast_US.append(confirmed_US_by_state.loc["Massachusetts", :])
Northeast_US = Northeast_US.append(confirmed_US_by_state.loc["Pennsylvania", :])
Northeast_US = Northeast_US.append(confirmed_US_by_state.loc["Delaware", :])
# for i in range(45):
minutephysics_plot(Northeast_US, "Northeast_US", "2/22/20")
  # Northeast_US = Northeast_US[Northeast_US.columns[:-1]]

Northeast_US.to_csv('Northeast_US.csv')

Southeast_US = pd.DataFrame(confirmed_US_by_state.loc["North Carolina", :]).T
Southeast_US = Southeast_US.append(confirmed_US_by_state.loc["South Carolina", :])
Southeast_US = Southeast_US.append(confirmed_US_by_state.loc["Georgia", :])
Southeast_US = Southeast_US.append(confirmed_US_by_state.loc["Alabama", :])
Southeast_US = Southeast_US.append(confirmed_US_by_state.loc["Mississippi", :])
Southeast_US = Southeast_US.append(confirmed_US_by_state.loc["Tennessee", :])
# for i in range(45):
minutephysics_plot(Southeast_US, "Southeast_US", "2/22/20")
  # Southeast_US = Southeast_US[Southeast_US.columns[:-1]]
Southeast_US.to_csv('Southeast_US.csv')

ctga = pd.DataFrame(confirmed_US_by_state.loc["Connecticut", :]).T
ctga = ctga.append(confirmed_US_by_state.loc["Georgia", :])
ctga = ctga.append(confirmed_US_by_state.loc["North Carolina", :])
# ctga = ctga.append(confirmed_US_by_state.loc["Florida", :])
minutephysics_plot(ctga, "CT_GA", "2/22/20")




# china_df = pd.DataFrame(confirmed_global_by_country.loc["China", :]).T
# s_korea_df = pd.DataFrame(confirmed_global_by_country.loc["Korea, South", :]).T
# italy_df = pd.DataFrame(confirmed_global_by_country.loc["Italy"]).T
# ny_df = pd.DataFrame(confirmed_US_by_state.loc["New York", :]).T
# ct_df = pd.DataFrame(confirmed_US_by_state.loc["Connecticut", :]).T

# for i in range(79):
#   minutephysics_plot(china_df, "China", "1/22/20")
#   china_df = china_df[china_df.columns[:-1]]

#   minutephysics_plot(s_korea_df, "South_Korea", "1/22/20")
#   s_korea_df = s_korea_df[s_korea_df.columns[:-1]]

#   minutephysics_plot(italy_df, "Italy", "1/22/20")
#   italy_df = italy_df[italy_df.columns[:-1]]

#   minutephysics_plot(ny_df, "New_York", "1/22/20")
#   ny_df = ny_df[ny_df.columns[:-1]]

#   minutephysics_plot(ct_df, "Connecticut", "1/22/20")
#   ct_df = ct_df[ct_df.columns[:-1]]

def plot_active(df, name, start_date):

  now = datetime.datetime.now()
  today = now.strftime("%Y_%m_%d")
  # assuming that active cases get "resolved" in 4 weeks
  start_index = df.columns.get_loc(start_date)
  for index, row, in df.iterrows():
    # start_index = row.iloc[0]
    total_cases = row.iloc[start_index:]
    active_cases = []
    dates = []
    # Connecticut's population
    population = {}
    population["Alabama"] = 4900000
    population["Alaska"] = 731545
    population["Arizona"] = 7279000
    population["Arkansas"] = 3018000
    population["California"] = 39510000
    population["Colorado"] = 5759000
    population["Connecticut"] = 3565000
    population["Delaware"] = 973764
    population["District of Columbia"] = 705749
    population["Florida"] = 21480000
    population["Georgia"] = 10620000
    population["Guam"] = 165768
    population["Hawaii"] = 1416000
    population["Idaho"] = 1787000
    population["Illinois"] = 12670000
    population["Indiana"] = 6732000
    population["Iowa"] = 3155000
    population["Kansas"] = 2913000
    population["Kentucky"] = 4468000
    population["Louisiana"] = 4649000
    population["Maine"] = 1344000
    population["Maryland"] = 6046000
    population["Massachusetts"] = 6893000
    population["Michigan"] = 9987000
    population["Minnesota"] = 5640000
    population["Mississippi"] = 2976000
    population["Missouri"] = 6137000
    population["Montana"] = 1069000
    population["Nebraska"] = 1934000
    population["Nevada"] = 3080000
    population["New Hampshire"] = 1360000
    population["New Jersey"] = 8882000
    population["New Mexico"] = 2097000
    population["New York"] = 19450000
    population["North Carolina"] = 10490000
    population["North Dakota"] = 762062
    population["Ohio"] = 11690000
    population["Oklahoma"] = 3957000
    population["Oregon"] = 4218000
    population["Pennsylvania"] = 12800000
    population["Puerto Rico"] = 3194000
    population["Rhode Island"] = 1059000
    population["South Carolina"] = 5149000
    population["South Dakota"] = 884659
    population["Tennessee"] = 6829000
    population["Texas"] = 29000000
    population["Utah"] = 3206000
    population["Vermont"] = 623989
    population["Virgin Islands"] = 106977
    population["Virginia"] = 8536000
    population["Washington"] = 7615000
    population["West Virginia"] = 1792000
    population["Wisconsin"] = 5822000
    population["Wyoming"] = 578759
    population["American Samoa"] = 55465


    contagious_period = 28
    for i in range(contagious_period, len(total_cases)):
        # if index in population.keys():
        #   active_cases.append((total_cases[i]-total_cases[i-contagious_period]) / population[index] * 100)
        #   plot_name = "Percentage of Population Sick"
        # else:
      active_cases.append((total_cases[i]-total_cases[i-contagious_period]))
      plot_name = "Number of People Sick"
      dates.append(total_cases.index[i])

    fig, ax = plt.subplots()
    ax2 = ax.twinx()
    max_cases = np.max(active_cases)
    ax.set(ylim=(0, max_cases * 1.1))
    if index in population.keys():
      ax2.set(ylim=(0, max_cases / population[index] * 100))

    ax.plot(dates, active_cases)
    ax.set_xticks(np.arange(0, len(active_cases), step=7))
    ax.tick_params(axis='x', rotation=45)
    ax.set_ylabel(plot_name)
    ax2.set_ylabel("Percentage of Population Sick")
    plt.gcf().subplots_adjust(bottom=0.15)
    fig.suptitle(index + " " + today)
    fig.savefig(name + '/Active_' + index + '.png', bbox_inches='tight')
    




    # plt.plot(dates, active_cases)
    # plt.xticks(np.arange(0, len(active_cases), step=7))
    # plt.xticks(rotation=45)
    # plt.gcf().subplots_adjust(bottom=0.15)
    # plt.ylabel(plot_name)
    # plt.title(index + " " + today)
    # plt.savefig(name + '/Active_' + index + '.png')
    # plt.close()


# df_active = pd.DataFrame(confirmed_US_by_state.loc["Connecticut"]).T
# df_active = df_active.append(confirmed_US_by_state.loc["New York", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Rhode Island", :])
# df_active = df_active.append(confirmed_US_by_state.loc["New Jersey", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Massachusetts", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Pennsylvania", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Delaware", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Florida", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Georgia", :])
# df_active = df_active.append(confirmed_US_by_state.loc["North Carolina", :])
# df_active = df_active.append(confirmed_US_by_state.loc["Alabama", :])






plot_active(confirmed_US_by_state, "Active_Cases", "2/22/20")

